--- a/sites/all/modules/contrib/inline_entity_form/inline_entity_form.info
+++ b/sites/all/modules/contrib/inline_entity_form/inline_entity_form.info
@@ -1,6 +1,7 @@
 name = Inline Entity Form
 description = "Provides a widget for inline management (creation, modification, removal) of referenced entities. "
 package = Fields
+configure = admin/config/content/inline-entity-form
 dependencies[] = entity
 dependencies[] = system (>7.14)
 core = 7.x
--- a/sites/all/modules/contrib/inline_entity_form/inline_entity_form.install
+++ b/sites/all/modules/contrib/inline_entity_form/inline_entity_form.install
@@ -0,0 +1,20 @@
+<?php
+
+/**
+ * Implements variable "inline_entity_form_has_draggable" for deactive draggable table from widget
+ * Implements hook_install()
+ */
+function inline_entity_form_install() {
+
+  // Add variable for manage draggable table
+  variable_set('inline_entity_form_has_draggable', TRUE);
+}
+
+/**
+ * Implements hook_uninstall()
+ */
+function inline_entity_form_uninstall() {
+
+  // Delete variable that manage draggable table
+  variable_del('inline_entity_form_has_draggable');
+}
\ No newline at end of file
--- a/sites/all/modules/contrib/inline_entity_form/inline_entity_form.module
+++ b/sites/all/modules/contrib/inline_entity_form/inline_entity_form.module
@@ -29,6 +29,14 @@ function inline_entity_form_menu() {
     'access callback' => TRUE,
     'type' => MENU_CALLBACK,
   );
+  $items['admin/config/content/inline-entity-form'] = array(
+    'title' => 'Inline Entity form',
+    'description' => 'Draggable table configuration',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('_inline_entity_form_admin'),
+    'access arguments' => array('administer modules '),
+    'type' => MENU_NORMAL_ITEM,
+  );
 
   return $items;
 }
@@ -56,7 +64,10 @@ function inline_entity_form_autocomplete($entity_type, $field_name, $bundle, $st
 
     // Loop through the products and convert them into autocomplete output.
     foreach ($products as $product_id => $data) {
-      $results[] = t('@label (!entity_id)', array('@label' => $data['title'], '!entity_id' => $product_id));
+      $results[] = t('@label (!entity_id)', array(
+        '@label' => $data['title'],
+        '!entity_id' => $product_id
+      ));
     }
   }
   elseif ($field['type'] == 'entityreference') {
@@ -67,7 +78,10 @@ function inline_entity_form_autocomplete($entity_type, $field_name, $bundle, $st
       // Loop through each entity type, and autocomplete with its titles.
       foreach ($labels as $entity_id => $label) {
         // entityreference has already check_plain-ed the title.
-        $results[] = t('!label (!entity_id)', array('!label' => $label, '!entity_id' => $entity_id));
+        $results[] = t('!label (!entity_id)', array(
+          '!label' => $label,
+          '!entity_id' => $entity_id
+        ));
       }
     }
   }
@@ -162,7 +176,7 @@ function inline_entity_form_product_status_options_list() {
  */
 function inline_entity_form_entity_delete($entity, $type) {
   $entity_info = entity_get_info($type);
-  list(,, $bundle) = entity_extract_ids($type, $entity);
+  list(, , $bundle) = entity_extract_ids($type, $entity);
   foreach (field_info_instances($type, $bundle) as $field_name => $instance) {
     if (strpos($instance['widget']['type'], 'inline_entity_form') === 0) {
       $controller = inline_entity_form_get_controller($instance);
@@ -234,7 +248,11 @@ function inline_entity_form_field_widget_info() {
 
   $widgets['inline_entity_form_single'] = array(
     'label' => t('Inline entity form - Single value'),
-    'field types' => array('commerce_line_item_reference', 'commerce_product_reference', 'entityreference'),
+    'field types' => array(
+      'commerce_line_item_reference',
+      'commerce_product_reference',
+      'entityreference'
+    ),
     'settings' => array(
       'fields' => array(),
       'type_settings' => array(),
@@ -246,7 +264,11 @@ function inline_entity_form_field_widget_info() {
   );
   $widgets['inline_entity_form'] = array(
     'label' => t('Inline entity form - Multiple values'),
-    'field types' => array('commerce_line_item_reference', 'commerce_product_reference', 'entityreference'),
+    'field types' => array(
+      'commerce_line_item_reference',
+      'commerce_product_reference',
+      'entityreference'
+    ),
     'settings' => array(
       'fields' => array(),
       'type_settings' => array(),
@@ -408,7 +430,10 @@ function inline_entity_form_field_widget_form(&$form, &$form_state, $field, $ins
   $labels = $controller->labels();
 
   // Build a parents array for this element's values in the form.
-  $parents = array_merge($element['#field_parents'], array($element['#field_name'], $element['#language']));
+  $parents = array_merge($element['#field_parents'], array(
+    $element['#field_name'],
+    $element['#language']
+  ));
 
   // Get the langcode of the parent entity.
   $parent_langcode = entity_language($element['#entity_type'], $element['#entity']);
@@ -420,17 +445,17 @@ function inline_entity_form_field_widget_form(&$form, &$form_state, $field, $ins
   // Determine the wrapper ID for the entire element.
   $wrapper = 'inline-entity-form-' . $ief_id;
   $element = array(
-    '#type' => 'fieldset',
-    '#tree' => TRUE,
-    '#description' => $instance['description'],
-    '#prefix' => '<div id="' . $wrapper . '">',
-    '#suffix' => '</div>',
-    '#attached' => array(
-      'css' => array(),
-    ),
-    '#ief_id' => $ief_id,
-    '#ief_root' => TRUE,
-  ) + $element;
+      '#type' => 'fieldset',
+      '#tree' => TRUE,
+      '#description' => $instance['description'],
+      '#prefix' => '<div id="' . $wrapper . '">',
+      '#suffix' => '</div>',
+      '#attached' => array(
+        'css' => array(),
+      ),
+      '#ief_id' => $ief_id,
+      '#ief_root' => TRUE,
+    ) + $element;
 
   if (module_exists('file')) {
     // file.js triggers uploads when the main Submit button is clicked.
@@ -545,6 +570,7 @@ function inline_entity_form_field_widget_form(&$form, &$form_state, $field, $ins
     );
     drupal_alter('inline_entity_form_table_fields', $fields, $context);
     $element['entities']['#table_fields'] = $fields;
+    $weight_delta = max(ceil(count($form_state['inline_entity_form'][$ief_id]['entities']) * 1.2), 50);
 
     foreach ($form_state['inline_entity_form'][$ief_id]['entities'] as $key => $value) {
       // Data used by theme_inline_entity_form_entity_table().
@@ -592,7 +618,7 @@ function inline_entity_form_field_widget_form(&$form, &$form_state, $field, $ins
         $row = &$element['entities'][$key];
         $row['delta'] = array(
           '#type' => 'weight',
-          '#delta' => 50,
+          '#delta' => $weight_delta,
           '#default_value' => $value['weight'],
           '#attributes' => array('class' => array('ief-entity-delta')),
         );
@@ -624,7 +650,8 @@ function inline_entity_form_field_widget_form(&$form, &$form_state, $field, $ins
         // and the access check for deleting happens inside the controller
         // removeForm() method.
         if (empty($entity_id) || $controller->getSetting('allow_existing')
-          || entity_access('delete', $controller->entityType(), $entity)) {
+          || entity_access('delete', $controller->entityType(), $entity)
+        ) {
           $row['actions']['ief_entity_remove'] = array(
             '#type' => 'submit',
             '#value' => t('Remove'),
@@ -706,19 +733,20 @@ function inline_entity_form_field_widget_form(&$form, &$form_state, $field, $ins
             '#value' => reset($settings['create_bundles']),
           );
         }
-
-        $element['actions']['ief_add'] = array(
-          '#type' => 'submit',
-          '#value' => t('Add new @type_singular', array('@type_singular' => $labels['singular'])),
-          '#name' => 'ief-' . $ief_id . '-add',
-          '#limit_validation_errors' => array(array_merge($parents, array('actions'))),
-          '#ajax' => array(
-            'callback' => 'inline_entity_form_get_element',
-            'wrapper' => $wrapper,
-          ),
-          '#submit' => array('inline_entity_form_open_form'),
-          '#ief_form' => 'add',
-        );
+        if ($controller->getSetting('allow_new')) {
+          $element['actions']['ief_add'] = array(
+            '#type' => 'submit',
+            '#value' => t('Add new @type_singular', array('@type_singular' => $labels['singular'])),
+            '#name' => 'ief-' . $ief_id . '-add',
+            '#limit_validation_errors' => array(array_merge($parents, array('actions'))),
+            '#ajax' => array(
+              'callback' => 'inline_entity_form_get_element',
+              'wrapper' => $wrapper,
+            ),
+            '#submit' => array('inline_entity_form_open_form'),
+            '#ief_form' => 'add',
+          );
+        }
       }
 
       if ($controller->getSetting('allow_existing')) {
@@ -760,7 +788,8 @@ function inline_entity_form_field_widget_form(&$form, &$form_state, $field, $ins
         // contains no values. That way the user is forced to create an entity.
         if (!$controller->getSetting('allow_existing') && $instance['required']
           && empty($form_state['inline_entity_form'][$ief_id]['entities'])
-          && count($settings['create_bundles']) == 1) {
+          && count($settings['create_bundles']) == 1
+        ) {
           $element['form']['actions']['ief_add_cancel']['#access'] = FALSE;
         }
       }
@@ -800,13 +829,13 @@ function inline_entity_form_form_alter(&$form, &$form_state, $form_id) {
 
     if ($submit_element) {
       $submit = array_merge(array('inline_entity_form_trigger_submit'), $form['#submit']);
-      if (!empty($submit_element['#submit'])){
+      if (!empty($submit_element['#submit'])) {
         $submit = array_merge($submit, $submit_element['#submit']);
         // $form['#submit'] and $submit_element['#submit'] might have matching
         // callbacks, resulting in duplicates and double processing.
         $submit_element['#submit'] = array_unique($submit);
       }
-      else{
+      else {
         $submit_element['#submit'] = $submit;
       }
       $submit_element['#ief_submit_all'] = TRUE;
@@ -945,7 +974,7 @@ function inline_entity_form_entity_form_validate(&$entity_form, &$form_state) {
   // Unset untriggered conditional fields errors
   $errors = form_get_errors();
   if ($errors && !empty($form_state['conditional_fields_untriggered_dependents'])) {
-    foreach ($form_state['conditional_fields_untriggered_dependents'] as $untriggered_dependents ) {
+    foreach ($form_state['conditional_fields_untriggered_dependents'] as $untriggered_dependents) {
       if (!empty($untriggered_dependents['errors'])) {
         foreach (array_keys($untriggered_dependents['errors']) as $key) {
           unset($errors[$key]);
@@ -1295,7 +1324,10 @@ function inline_entity_form_open_form($form, &$form_state) {
 
   $form_state['rebuild'] = TRUE;
   // Get the current form values.
-  $parents = array_merge($element['#field_parents'], array($element['#field_name'], $element['#language']));
+  $parents = array_merge($element['#field_parents'], array(
+    $element['#field_name'],
+    $element['#language']
+  ));
   $form_values = drupal_array_get_nested_value($form_state['values'], $parents);
 
   $form_state['inline_entity_form'][$ief_id]['form'] = $form_state['triggering_element']['#ief_form'];
@@ -1384,7 +1416,11 @@ function inline_entity_form_close_row_form($form, &$form_state) {
  */
 function inline_entity_form_close_child_forms($form, &$form_state) {
   $element = inline_entity_form_get_element($form, $form_state);
-  inline_entity_form_close_all_forms($element, $form_state);
+  foreach (element_children($element) as $key) {
+    if (!empty($element[$key])) {
+      inline_entity_form_close_all_forms($element[$key], $form_state);
+    }
+  }
 }
 
 /**
@@ -1490,15 +1526,23 @@ function inline_entity_form_field_attach_submit($parent_entity_type, $parent_ent
       uasort($values['entities'], 'drupal_sort_weight');
       // Go through the IEF data and assemble a list of ids.
       $entity_ids = array();
+      $need_reset = FALSE;
       foreach ($values['entities'] as $item) {
         if ($item['needs_save']) {
           $controller->save($item['entity'], $context);
+          $need_reset = TRUE;
         }
 
         list($entity_id) = entity_extract_ids($entity_type, $item['entity']);
         $entity_ids[] = array($values['settings']['column'] => $entity_id);
       }
 
+      // Prevent the entity from showing up in subsequent add forms.
+      // @todo Investigate a cleaner fix.
+      if (isset($form['#op']) && $form['#op'] == 'add' && $need_reset) {
+        $form_state['inline_entity_form'][$ief_id]['entities'] = array();
+      }
+
       if (!empty($entity_ids)) {
         // Set the list of ids as the field value.
         $parent_entity->{$field_name}[$langcode] = $entity_ids;
@@ -1531,11 +1575,13 @@ function inline_entity_form_cleanup_entity_form_state($entity_form, &$form_state
   $instances = field_info_instances($entity_form['#entity_type'], $bundle);
   foreach ($instances as $instance) {
     $field_name = $instance['field_name'];
-    $parents = $entity_form[$field_name]['#parents'];
-    array_pop($parents);
-    $langcode = $entity_form[$field_name]['#language'];
-    $field_state = array();
-    field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);
+    if (!empty($entity_form[$field_name]['#parents'])) {
+      $parents = $entity_form[$field_name]['#parents'];
+      array_pop($parents);
+      $langcode = $entity_form[$field_name]['#language'];
+      $field_state = array();
+      field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);
+    }
   }
 }
 
@@ -1596,7 +1642,7 @@ function theme_inline_entity_form_entity_table($variables) {
   // Sort the fields by weight.
   uasort($fields, 'drupal_sort_weight');
   // If one of the rows is in form context, disable tabledrag.
-  $has_tabledrag = TRUE;
+  $has_tabledrag = variable_get('inline_entity_form_has_draggable', TRUE);
   foreach (element_children($form) as $key) {
     if (!empty($form[$key]['form'])) {
       $has_tabledrag = FALSE;
@@ -1606,7 +1652,10 @@ function theme_inline_entity_form_entity_table($variables) {
   $header = array();
   if ($has_tabledrag) {
     $header[] = array('data' => '', 'class' => array('ief-tabledrag-header'));
-    $header[] = array('data' => t('Sort order'), 'class' => array('ief-sort-order-header'));
+    $header[] = array(
+      'data' => t('Sort order'),
+      'class' => array('ief-sort-order-header')
+    );
   }
   // Add header columns for each field.
   $first = TRUE;
@@ -1655,12 +1704,12 @@ function theme_inline_entity_form_entity_table($variables) {
         $property = $wrapper->{$field_name};
         // label() returns human-readable versions of token and list properties.
         $data = $property->label() ? $property->label() : $property->value();
-        $data = check_plain($data);
+        $data = empty($field['sanitized']) ? check_plain($data) : $data;
       }
       elseif ($field['type'] == 'field' && isset($entity->{$field_name})) {
         $display = array(
-          'label' => 'hidden',
-        ) + $field;
+            'label' => 'hidden',
+          ) + $field;
         // The formatter needs to be under the 'type' key.
         if (isset($display['formatter'])) {
           $display['type'] = $display['formatter'];
@@ -1680,8 +1729,14 @@ function theme_inline_entity_form_entity_table($variables) {
         }
         $data = drupal_render($renderable_data);
       }
+      elseif ($field['type'] == 'callback' && isset($field['render_callback']) && function_exists($field['render_callback'])) {
+        $data = call_user_func($field['render_callback'], $entity_type, $entity);
+      }
 
-      $cells[] = array('data' => $data, 'class' => array('inline-entity-form-' . $entity_type . '-' . $field_name));
+      $cells[] = array(
+        'data' => $data,
+        'class' => array('inline-entity-form-' . $entity_type . '-' . $field_name)
+      );
     }
     // Add the buttons belonging to the "Operations" column.
     $cells[] = drupal_render($form[$key]['actions']);
@@ -1691,9 +1746,16 @@ function theme_inline_entity_form_entity_table($variables) {
     // If the current entity array specifies a form, output it in the next row.
     if (!empty($form[$key]['form'])) {
       $row = array(
-        array('data' => drupal_render($form[$key]['form']), 'colspan' => count($fields) + 1),
+        array(
+          'data' => drupal_render($form[$key]['form']),
+          'colspan' => count($fields) + 1
+        ),
+      );
+      $rows[] = array(
+        'data' => $row,
+        'class' => array('ief-row-form'),
+        'no_striping' => TRUE
       );
-      $rows[] = array('data' => $row, 'class' => array('ief-row-form'), 'no_striping' => TRUE);
     }
   }
 
@@ -1709,7 +1771,12 @@ function theme_inline_entity_form_entity_table($variables) {
       'id' => $id,
       'class' => array('ief-entity-table'),
     );
-    return theme('table', array('header' => $header, 'rows' => $rows, 'sticky' => FALSE, 'attributes' => $table_attributes));
+    return theme('table', array(
+      'header' => $header,
+      'rows' => $rows,
+      'sticky' => FALSE,
+      'attributes' => $table_attributes
+    ));
   }
 }
 
@@ -1754,3 +1821,30 @@ function inline_entity_form_pre_render_add_fieldset_markup($form) {
 
   return $form;
 }
+
+/**
+ * Custom callback for module settings
+ * @return mixed
+ */
+function _inline_entity_form_admin() {
+  $form = array();
+
+  $form['has_draggable'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Has draggable'),
+    '#default_value' => variable_get('inline_entity_form_has_draggable'),
+    '#description' => t("Active / Deactive draggable table for Inline Entity Form"),
+  );
+  $form['#submit'][] = '_inline_entity_form_admin_submit'; //Submit button call back.
+
+  return system_settings_form($form);
+}
+
+/**
+ * Submit for module settings form
+ * @param $form
+ * @param $form_state
+ */
+function _inline_entity_form_admin_submit(&$form, $form_state) {
+  variable_set('inline_entity_form_has_draggable', $form_state['values']['has_draggable']);
+}
\ No newline at end of file
